-- Date Manipulation with Sales Reporting

/* Q1: What will be the difference in the results between
the following two lines of code. You can test them against the
GA superstore database. */


SELECT DATE_PART('month',ORDER_DATE)::numeric
FROM ORDERS;


SELECT EXTRACT(MONTH FROM ORDER_DATE)
FROM ORDERS;

select age(order_date),
    DATE_PART('month', order_date) as order_month,
	DATE_TRUNC('month', order_date) as order_month,
	EXTRACT(month from order_date) as extracted_month_number
from orders

-- the first example takes slightly more compute to run the program v the second. The first query comes
--as a numeric v the second one which results in double-precision

/* Q2:  If you wished to have the Month Names (like, December) 
in output where the data table only a had date stamp (timestamp or full date)
what are some options that come to mind?  */

SELECT ORDER_ID,
	TO_CHAR(ORDER_DATE,'Mon') AS MON
FROM ORDERS
LIMIT 100;

SELECT 
  to_char(current_timestamp, 'mon') AS "mon",
  to_char(current_timestamp, 'Mon') AS "Mon",
  to_char(current_timestamp, 'MON') AS "MON",
  to_char(current_timestamp, 'MONTH') AS "MONTH",
  to_char(current_timestamp, 'Month') AS "Month";

/*Q3: Write a query that returns Superstore sales 
summed AND separated by year (column 1) and month (separate column), 
showing the numeric month number (column 2) alongside the month name (column 3).
Format the summed sales as currency (column 4). 
Sort in chronological order. */


SELECT EXTRACT(YEAR FROM ORDER_DATE),
	EXTRACT(MONTH FROM ORDER_DATE),
	TO_CHAR(ORDER_DATE,'Mon') AS MON, 
	SUM(SALES)
FROM ORDERS
GROUP BY 1,2,3
ORDER BY 1,2
LIMIT 10


/* Q4: Sales Management has requested a report that shows the 
Average Sales by Quarter. They've specifically requested that
the calculation of average monthly sales be used. You will need 
to create a temporary table or subquery that calculates the 
monthly averages before calculating the quarterly average.
This method creates an average less influenced by daily highs and lows.
*/

select extract('year' from order_month),
	extract(quarter from order_month) quarter, 
	round(avg(avg_msales),2)::money avg_qsales
from(
	select date_trunc('month', order_date) order_month, round(avg(sales),2) avg_msales
	from orders
	group by 1
	) t1
group by 1,2
order by 1,2


/* Q5: Sales Execs are now asking for a "Discrete" view of the
quarterly sales, that is a consolidation of all the years.
What do you need to change about the last query to provide 
those results? Present the output showing most to least
sales volume. */

SELECT EXTRACT(QUARTER FROM ORDER_MONTH) QUARTER,
	ROUND(AVG(AVG_MSALES),2)::MONEY AVG_QSALES
FROM(
	SELECT DATE_TRUNC('month', ORDER_DATE) ORDER_MONTH,
			ROUND(AVG(SALES),2) AVG_MSALES
	 FROM ORDERS
	 GROUP BY 1
	) T1
GROUP BY 1
ORDER BY 2

SELECT O.SHIP_MODE,
	COUNT(O.ORDER_ID)
FROM ORDERS O
JOIN RETURNS R USING(ORDER_ID)
WHERE R.REASON_RETURNED ilike '%wrong item%'
GROUP BY O.SHIP_MODE

SELECT SHIP_MODE,
	COUNT(*)
FROM ORDERS
WHERE ORDER_ID IN
		(SELECT ORDER_ID
			FROM RETURNS
			WHERE REASON_RETURNED ilike '%wrong item%')
GROUP BY SHIP_MODE;

--EX 2 USING FROM STATEMENT WITH TRUNC()--
--slide 15, sales for every month non-agg, month (as num), sales amount

SELECT date_part('year', order_month) as year, avg(monthly_sales)::money as avg_monthly_sales
FROM(
	SELECT date_trunc('month', order_date)::date as order_month,
		SUM(sales) as monthly_sales
	FROM orders
	GROUP BY 1
) as T1
group by 1
order by 1 desc;

--SOLO EXCERCISE ---
--create query that classifies customer by purchase frequent and reports total sales per customer_id
--then how much sales in each segment did they make? (Summarize categories into distinct groups with totals)

SELECT CUSTOMER_TYPE,
	SUM(TOTAL_SALES)::MONEY AS TOTAL_SALES
FROM
	(SELECT CUSTOMER_ID,
			CASE
							WHEN COUNT(DISTINCT ORDER_ID) >= 1000 THEN 'SUPPLIER'
							WHEN COUNT(DISTINCT ORDER_ID) >= 100 THEN 'FREQUENT'
							ELSE 'ALL OTHERS'
			END AS CUSTOMER_TYPE,
			SUM(SALES) AS TOTAL_SALES
		FROM ORDERS
		GROUP BY 1) AS T1
GROUP BY 1
ORDER BY 2 DESC;

--how many orders had products with a cost of more than 500

SELECT PRODUCT_ID
FROM ORDERS
WHERE PRODUCT_ID in
		(SELECT PRODUCT_ID
			FROM PRODUCTS
			WHERE PRODUCT_COST_TO_CONSUMER > 500);
			
--find orders that had products with a cost of more than 500 using NOT IN

SELECT COUNT(PRODUCT_ID)
FROM ORDERS
WHERE PRODUCT_ID NOT IN
		(SELECT PRODUCT_ID
					FROM PRODUCTS
					WHERE PRODUCT_COST_TO_CONSUMER < 500);



--HOW MANY ORDERS HAVE MORE PROFFIT THAN THE AVERAGE PRODUCT COST TO CONSUMER? 
		
SELECT COUNT(ORDER_ID) QTY_OVER_AVG_PRODUCT_CTC
FROM ORDERS
WHERE PROFIT >
		(SELECT AVG(PRODUCT_COST_TO_CONSUMER)
			FROM PRODUCTS);

WITH T1 AS
	(SELECT *
		FROM ORDERS),
	T2 AS
	(SELECT *
		FROM PRODUCTS)
SELECT *
FROM T1
JOIN T2 USING(PRODUCT_ID)
LIMIT 100;

-- SAME AS

SELECT *
FROM ORDERS O
JOIN PRODUCTS P USING (PRODUCT_ID)
LIMIT 100;
--------------
--cross join statistics
WITH SALES_AVG AS
	(SELECT AVG(SALES)::MONEY AVG_SALES
		FROM ORDERS),
	SALES_MIN AS
	(SELECT MIN(SALES)::MONEY MIN_SALES
		FROM ORDERS)
SELECT *
FROM SALES_AVG
CROSS JOIN SALES_MIN


---------------
--except join or type 2 subquery
WITH T1 AS
	(SELECT ORDER_ID
		FROM RETURNS),
	T2 AS
	(SELECT *
		FROM ORDERS
		WHERE ORDER_ID not in
				(SELECT *
					FROM T1)
		LIMIT 100)
SELECT *
FROM T2

--------------
--how has total(sales) of each segment changed over the years
--subquery - segment and sum sales
--total

SELECT C.SEGMENT,
	DATE_PART('years',

		O.ORDER_DATE) AS YEAR,
	SUM(O.SALES)::MONEY SUM_YEAR_2015
FROM ORDERS O
JOIN CUSTOMERS C USING(CUSTOMER_ID)--	where order_date::text ilike '%2015-%'

GROUP BY 1, 2
ORDER BY 1, 2;


--------------
--on average, what % of salespeople make a sale each month
--avg(num_of_sp)
-- num_of_sp, tot_sp, month

SELECT D_MONTH,
	ROUND(AVG(SALES_PPL),
		2) AS PCT_SALESPERSONS_SELL_PER_MONTH
FROM
	(SELECT DATE_PART('year',

										O.ORDER_DATE) D_YEAR,
			DATE_PART('month',

				O.ORDER_DATE)D_MONTH,
			ROUND(COUNT(DISTINCT R.SALESPERSON)::numeric /
										(SELECT COUNT(DISTINCT SALESPERSON)::numeric
											FROM REGIONS),
				2) SALES_PPL
		FROM ORDERS O
		LEFT JOIN REGIONS R USING(REGION_ID)
		GROUP BY 1, 2) AS T1
GROUP BY 1
ORDER BY 1 DESC,
	2 DESC;

-------------
--What percent of all sales in the United States were returned in 2020
-----

SELECT D_YEAR,
	ROUND(COUNT(DISTINCT RETURNED)::numeric / COUNT(DISTINCT SOLD)::numeric,
		3) PRCT_RETURNED_IN_2020
FROM
	(SELECT DATE_PART('year',

										O.ORDER_DATE) D_YEAR,
			O.ORDER_ID SOLD,
			R.ORDER_ID RETURNED
		FROM ORDERS O
		LEFT JOIN RETURNS R USING(ORDER_ID)
		WHERE DATE_PART('year',

									O.ORDER_DATE) = 2020
			AND REGION_ID in
				(SELECT REGION_ID
					FROM REGIONS
					WHERE COUNTRY_CODE ilike '%us%')
		ORDER BY RETURNED ASC) AS T1
GROUP BY 1;
